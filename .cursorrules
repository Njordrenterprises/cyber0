# Card-Based Architecture System Rules

## Directory Structure

```plaintext
/
├── src/
│   ├── cards/              # Card modules directory
│   │   ├── cards.js        # Base card class + KV operations
│   │   ├── cards.css       # Shared card styles
│   │   └── [card-name]/    # Individual card directories
│   │       ├── [card-name].js   # Card implementation + Alpine.js component
│   │       ├── [card-name].css  # Card-specific styles
│   │       └── [card-name].html # Card template
│   ├── js/                 # Client-side libraries
│   └── views/              # View templates
├── main.ts                # Server entry point (routing + dynamic loading)
└── index.html            # Application shell
```

## Initialization Rules

### 1. Server-Side Card Initialization
```typescript
// Initialize card instance FIRST
await infoCard.init(kv, 'test-user');

// THEN expose methods to globalThis
globalThis.cardData = {
  info: {
    kv: { /* KV methods */ },
    userId: 'test-user',
    ...infoCard.getAlpineMethods()  // Expose bound methods
  }
};
```

### 2. Client-Side Card Initialization
```typescript
// In card template x-data
{
  cardData: null,
  async init() {
    // Get already initialized card data
    this.cardData = globalThis.cardData.info;
    await this.loadMessage();
  }
}
```

### 3. Initialization Order
1. Server initializes card instance
2. Server exposes methods to globalThis
3. Client gets reference to initialized data
4. Client uses methods directly

NEVER:
- Poll for initialization
- Re-initialize card data
- Modify globalThis after initial setup

## Module Standards

### 1. Card Module Requirements

Every card MUST have exactly three files:
- `[card-name].html` - Template with Alpine.js bindings
- `[card-name].css` - Card-specific styles
- `[card-name].js` - Alpine.js component logic

No exceptions to this structure are allowed. All three files are loaded together by the server.

### 2. Card Implementation Rules

- HTML: Contains only template and Alpine.js bindings
- CSS: Contains only card-specific styles
- JS: Contains only Alpine.js component logic and KV interactions

### 3. Server Loading

The server automatically bundles all three card files:
1. Loads HTML template
2. Inlines CSS in a style tag
3. Inlines JS in a module script tag

## Data Flow Rules

### 1. KV Operations

- All KV operations go through standard endpoints:
  - GET /kv/get
  - POST /kv/set
  - GET /kv/watch (EventSource)

### 2. Component Integration

- Card modules expose public API for Alpine.js
- Components use public API only
- Watch KV updates through EventSource
- Handle cleanup in destroy()

### 3. State Management

- Each card manages its own state
- KV watch triggers state reloads
- Alpine.js handles UI updates

## Server Endpoints

1. Views: `GET /views/[view-name]`
2. Cards: `GET /cards/[card-name]/template`
3. KV Operations:
   - `POST /kv/get`
   - `POST /kv/set`
   - `GET /kv/watch`

## Best Practices

1. Card Development
   - Always create all three required files
   - Keep template logic in HTML
   - Keep styles in CSS
   - Keep component logic in JS

2. State Management
   - Use KV for persistence
   - Use Alpine.js for UI state
   - Use EventSource for updates

3. Error Handling
   - Validate KV operations
   - Handle network errors
   - Provide user feedback
