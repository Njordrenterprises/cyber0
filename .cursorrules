# Card-Based Architecture System Rules

## Directory Structure

```plaintext
/
├── src/
│   ├── cards/              # Card modules directory
│   │   ├── cards.ts        # Base card class
│   │   ├── cards.css       # Shared card styles
│   │   └── [card-name]/    # Individual card directories
│   │       ├── [card-name].ts   # Card's Alpine.js module + KV logic
│   │       └── [card-name].html # Card template
│   ├── js/                 # Client-side libraries
│   └── views/              # View templates
├── main.css               # Global styles
└── main.html             # Application shell
```

## Card Module Requirements

### 1. TypeScript Module (`[card-name].ts`)

Must extend base Card class and export:

- Default instance with unique `id`
- Typed state interface extending `CardState`
- Typed KV entry interface extending `CardKvEntry`
- Override `loadInitialState()` for KV initialization
- Override `getState()` for state exposure
- Implement card-specific methods

### 2. HTML Template (`[card-name].html`)

Must include:

- `class="card [card-name]-card"` - Card class naming
- `x-data="[card-name]"` - Alpine.js binding
- `x-init="await init($kv, $userId)"` - KV initialization
- `hx-swap-oob="true"` - HTMX swap support

### 3. CSS Inheritance

Cards inherit styles from:

1. `main.css` - Global typography and variables
2. `cards.css` - Base card styles
   Individual card styles should only override when necessary

## State Management Rules

### KV Operations

1. Use structured keys: `['cards', cardId, userId]`
2. Watch for KV changes using `kv.watch()`
3. Handle watch errors and reconnection
4. Use atomic updates with timestamps

### Alpine.js Integration

1. Export reactive data properties
2. Use async initialization
3. Handle cleanup in destroy()
4. Maintain type safety

### HTMX Integration

1. Use proper swap strategies
2. Handle loading states
3. Manage error states
4. Support partial updates

## API Endpoints

- Templates: `GET /api/cards/[card-name]/template`
- State: `GET /api/cards/[card-name]/state`
- Actions: `POST /api/cards/[card-name]/[action]`
- Updates: `PUT /api/cards/[card-name]/[property]`

## Development Guidelines

### Local Development

1. Use `deno task serve` for server
2. Use Vite for client-side development when needed
3. Keep client-side JavaScript minimal
4. Follow hypermedia-driven approach

### Type Safety

1. Use TypeScript for all modules
2. Define proper interfaces
3. Maintain strict type checking
4. Document type constraints

### Performance

1. Optimize KV queries
2. Use efficient DOM updates
3. Implement proper caching
4. Lazy load when appropriate

### Security

1. Validate all inputs
2. Sanitize state data
3. Implement proper access controls
4. Handle errors gracefully

## Testing Strategy

### Unit Tests

1. Test card logic
2. Test KV operations
3. Test state management
4. Test type safety

### Integration Tests

1. Test API endpoints
2. Test KV watch functionality
3. Test HTMX interactions
4. Test Alpine.js reactivity

### Performance Tests

1. Measure KV operation speed
2. Test DOM update efficiency
3. Monitor memory usage
4. Check network payload size
