# Card-Based Architecture System Rules

## Directory Structure

```plaintext
/
├── src/
│   ├── cards/              # Card modules directory
│   │   ├── cards.ts        # Base card class + KV operations
│   │   ├── cards.css       # Shared card styles
│   │   └── [card-name]/    # Individual card directories
│   │       ├── [card-name].ts   # Card implementation + Alpine.js component
│   │       ├── [card-name].css  # Card-specific styles
│   │       └── [card-name].html # Card template
│   ├── js/                 # Client-side libraries
│   └── views/              # View templates
├── main.ts                # Server entry point (routing only)
└── index.html            # Application shell
```

## Module Responsibilities

### 1. Base Card Module (cards.ts)

Must contain:

- Base Card class with KV operations
- Common interfaces (CardState, CardKvEntry)
- KV endpoint handlers (get, set, watch)
- Card template serving
- Type declarations for KV operations

### 2. Card Implementation Module ([card-name].ts)

Must contain:

- Card-specific state interface extending CardState
- Card-specific KV entry interface extending CardKvEntry
- Card class extending base Card
- Alpine.js component registration
- Public API methods for Alpine.js interaction

### 3. Card Template ([card-name].html)

Must include:

- `class="card [card-name]-card"` - Card class naming
- `x-data="[card-name]Card"` - Alpine.js binding
- `x-init="init"` - Component initialization

## Data Flow Rules

### 1. KV Operations

- All KV operations must go through base Card class
- Use structured keys: `['cards', cardId, userId, ...rest]`
- Handle watch events for real-time updates
- Maintain atomic updates with timestamps

### 2. Component Integration

- Card modules expose public API for Alpine.js
- Components use public API only, never direct KV access
- Watch KV updates through EventSource
- Handle cleanup in destroy()

### 3. State Management

- Base state defined in CardState interface
- Card-specific state extends base state
- State updates trigger UI updates via Alpine.js
- KV watch triggers state reloads

## Server Endpoints

1. Views: `GET /views/[view-name]`
2. Cards: `GET /cards/[card-name]/template`
3. KV Operations:
   - `POST /kv/get`
   - `POST /kv/set`
   - `GET /kv/watch`
